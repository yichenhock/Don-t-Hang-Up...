[gd_scene load_steps=26 format=2]

[ext_resource path="res://scenes/backgrounds/background.tscn" type="PackedScene" id=1]
[ext_resource path="res://scenes/phoneBooth.tscn" type="PackedScene" id=2]
[ext_resource path="res://scenes/speechOptions.tscn" type="PackedScene" id=3]
[ext_resource path="res://scenes/speechSelf.tscn" type="PackedScene" id=4]
[ext_resource path="res://scenes/menu/pauseMenu.tscn" type="PackedScene" id=5]
[ext_resource path="res://scenes/speechPhone.tscn" type="PackedScene" id=6]
[ext_resource path="res://scenes/ending.tscn" type="PackedScene" id=7]
[ext_resource path="res://scenes/menu/menu.tscn" type="PackedScene" id=8]
[ext_resource path="res://scenes/Kalm.tscn" type="PackedScene" id=9]
[ext_resource path="res://scenes/menu/gameOver.tscn" type="PackedScene" id=10]
[ext_resource path="res://scripts/DialogueNode.gd" type="Script" id=11]
[ext_resource path="res://scenes/main.gd" type="Script" id=12]
[ext_resource path="res://shaders/godotboy_screen.shader" type="Shader" id=13]
[ext_resource path="res://shaders/rain.shader" type="Shader" id=14]
[ext_resource path="res://shaders/blur.shader" type="Shader" id=15]
[ext_resource path="res://assets/palettes/night.png" type="Texture" id=16]
[ext_resource path="res://assets/palettes/red.png" type="Texture" id=17]
[ext_resource path="res://assets/textures/rain_noise.jpg" type="Texture" id=18]

[sub_resource type="ShaderMaterial" id=1]
shader = ExtResource( 14 )
shader_param/intensity = 0.05
shader_param/noise = ExtResource( 18 )

[sub_resource type="Animation" id=2]
length = 3.5
tracks/0/type = "value"
tracks/0/path = NodePath("rectTop:rect_size")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 1.4, 2.2, 3.1 ),
"transitions": PoolRealArray( 2, -2, 1, 5, 1 ),
"update": 0,
"values": [ Vector2( 450, 375 ), Vector2( 450, 286.011 ), Vector2( 450, 324.646 ), Vector2( 450, 304.327 ), Vector2( 450, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("rectTop:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 3.1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("rectBot:rect_size")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 1, 1.4, 2.2, 3.1 ),
"transitions": PoolRealArray( 2, -2, 1, 4, 1 ),
"update": 0,
"values": [ Vector2( 450, 375 ), Vector2( 450, 286.011 ), Vector2( 450, 324.646 ), Vector2( 450, 304.327 ), Vector2( 450, 0 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("rectBot:rect_position")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 1, 1.4, 2.2, 3.1 ),
"transitions": PoolRealArray( 2, -2, 1, 4, 1 ),
"update": 0,
"values": [ Vector2( 0, 375 ), Vector2( 0, 463.989 ), Vector2( 0, 425.354 ), Vector2( 0, 445.674 ), Vector2( 0, 750 ) ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("rectBot:visible")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0, 3.1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("../blur/blur:material:shader_param/blur_amount")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0, 3.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 5.0, 0.0 ]
}
tracks/6/type = "value"
tracks/6/path = NodePath("../blur/blur:mouse_filter")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"times": PoolRealArray( 0, 3.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 0, 2 ]
}
tracks/7/type = "value"
tracks/7/path = NodePath("../CRT/CRTShader:material:shader_param/BarrelPower")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/keys = {
"times": PoolRealArray( 0, 3.5 ),
"transitions": PoolRealArray( 0.5, 1 ),
"update": 0,
"values": [ 1.1, 1.0 ]
}

[sub_resource type="ShaderMaterial" id=3]
shader = ExtResource( 13 )
shader_param/palette = ExtResource( 17 )

[sub_resource type="Animation" id=4]
length = 8.0
tracks/0/type = "value"
tracks/0/path = NodePath(".:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 8 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="ShaderMaterial" id=5]
shader = ExtResource( 15 )
shader_param/blur_amount = 0.0

[sub_resource type="Shader" id=6]
code = "shader_type canvas_item;

uniform float screen_width = 1024;
uniform float screen_height = 600;

// Curvature
uniform float BarrelPower =1.1;
// Color bleeding
uniform float color_bleeding = 1.2;
uniform float bleeding_range_x = 3;
uniform float bleeding_range_y = 3;
// Scanline
uniform float lines_distance = 4.0;
uniform float scan_size = 2.0;
uniform float scanline_alpha = 0.9;
uniform float lines_velocity = 30.0;

vec2 distort(vec2 p) 
{
	float angle = p.y / p.x;
	float theta = atan(p.y,p.x);
	float radius = pow(length(p), BarrelPower);
	
	p.x = radius * cos(theta);
	p.y = radius * sin(theta);
	
	return 0.5 * (p + vec2(1.0,1.0));
}

void get_color_bleeding(inout vec4 current_color,inout vec4 color_left){
	current_color = current_color*vec4(color_bleeding,0.5,1.0-color_bleeding,1);
	color_left = color_left*vec4(1.0-color_bleeding,0.5,color_bleeding,1);
}

void get_color_scanline(vec2 uv,inout vec4 c,float time){
	float line_row = floor((uv.y * screen_height/scan_size) + mod(time*lines_velocity, lines_distance));
	float n = 1.0 - ceil((mod(line_row,lines_distance)/lines_distance));
	c = c - n*c*(1.0 - scanline_alpha);
	c.a = 1.0;
}

void fragment()
{
	vec2 xy = SCREEN_UV * 2.0;
	xy.x -= 1.0;
	xy.y -= 1.0;
	
	float d = length(xy);
	if(d < 1.5){
		xy = distort(xy);
	}
	else{
		xy = SCREEN_UV;
	}
	
	float pixel_size_x = 1.0/screen_width*bleeding_range_x;
	float pixel_size_y = 1.0/screen_height*bleeding_range_y;
	vec4 color_left = texture(SCREEN_TEXTURE,xy - vec2(pixel_size_x, pixel_size_y));
	vec4 current_color = texture(SCREEN_TEXTURE,xy);
	get_color_bleeding(current_color,color_left);
	vec4 c = current_color+color_left;
	get_color_scanline(xy,c,TIME);
	COLOR = c;

}"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/screen_width = 450.0
shader_param/screen_height = 750.0
shader_param/BarrelPower = 1.0
shader_param/color_bleeding = 1.2
shader_param/bleeding_range_x = 0.15
shader_param/bleeding_range_y = 0.15
shader_param/lines_distance = 1.0
shader_param/scan_size = 2.0
shader_param/scanline_alpha = 1.0
shader_param/lines_velocity = 10.0

[node name="main" type="Node"]
script = ExtResource( 12 )

[node name="DialogueNode" type="Node" parent="."]
script = ExtResource( 11 )

[node name="Scenes" type="ResourcePreloader" parent="."]
resources = [ PoolStringArray( "ending" ), [ ExtResource( 7 ) ] ]

[node name="background" parent="." instance=ExtResource( 1 )]
pause_mode = 2
palette = ExtResource( 16 )

[node name="phoneBooth" parent="." instance=ExtResource( 2 )]

[node name="CanvasLayer" type="CanvasLayer" parent="."]
layer = 2

[node name="rainShader" type="BackBufferCopy" parent="CanvasLayer"]
visible = false
rect = Rect2( 0, 0, 450, 750 )

[node name="ColorRect" type="ColorRect" parent="CanvasLayer/rainShader"]
material = SubResource( 1 )
margin_right = 72.0
margin_bottom = 751.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect2" type="ColorRect" parent="CanvasLayer/rainShader"]
material = SubResource( 1 )
anchor_left = 1.0
anchor_right = 1.0
margin_left = -72.0
margin_bottom = 751.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect3" type="ColorRect" parent="CanvasLayer/rainShader"]
material = SubResource( 1 )
anchor_left = 1.0
anchor_right = 1.0
margin_left = -378.0
margin_right = -72.0
margin_bottom = 21.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="speechPhone" parent="CanvasLayer" instance=ExtResource( 6 )]
visible = false
margin_left = 100.053
margin_top = 250.888
margin_right = 100.053
margin_bottom = 250.888

[node name="speechOptions" parent="CanvasLayer" instance=ExtResource( 3 )]

[node name="speechSelf" parent="CanvasLayer" instance=ExtResource( 4 )]

[node name="pauseMenu" parent="CanvasLayer" instance=ExtResource( 5 )]
visible = false

[node name="gameOver" parent="CanvasLayer" instance=ExtResource( 10 )]
visible = false

[node name="menu" parent="CanvasLayer" instance=ExtResource( 8 )]

[node name="firstTransit" type="Control" parent="CanvasLayer"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
__meta__ = {
"_edit_lock_": true,
"_edit_use_anchors_": false
}

[node name="rectTop" type="ColorRect" parent="CanvasLayer/firstTransit"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
margin_bottom = -750.0
color = Color( 0.0196078, 0.027451, 0.0313726, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="rectBot" type="ColorRect" parent="CanvasLayer/firstTransit"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = 750.0
color = Color( 0.0196078, 0.027451, 0.0313726, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="transitAnim" type="AnimationPlayer" parent="CanvasLayer/firstTransit"]
autoplay = "open"
anims/open = SubResource( 2 )

[node name="PaletteShader" type="BackBufferCopy" parent="CanvasLayer"]
modulate = Color( 1, 1, 1, 0 )
copy_mode = 2
rect = Rect2( 0, 0, 450, 750 )
__meta__ = {
"_edit_lock_": true
}

[node name="ColorRect" type="ColorRect" parent="CanvasLayer/PaletteShader"]
material = SubResource( 3 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
color = Color( 1, 1, 1, 0 )
__meta__ = {
"_edit_lock_": true,
"_edit_use_anchors_": false
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="CanvasLayer/PaletteShader"]
anims/fadeIn = SubResource( 4 )

[node name="blur" type="BackBufferCopy" parent="CanvasLayer"]
scale = Vector2( 1.00702, 1.00457 )
copy_mode = 2
rect = Rect2( 0, 0, 450, 750 )
__meta__ = {
"_edit_lock_": true
}

[node name="blur" type="ColorRect" parent="CanvasLayer/blur"]
material = SubResource( 5 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
__meta__ = {
"_edit_lock_": true,
"_edit_use_anchors_": false
}

[node name="CRT" type="BackBufferCopy" parent="CanvasLayer"]
copy_mode = 2
rect = Rect2( 0, 0, 450, 750 )
__meta__ = {
"_edit_lock_": true
}

[node name="CRTShader" type="ColorRect" parent="CanvasLayer/CRT"]
material = SubResource( 7 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
__meta__ = {
"_edit_lock_": true,
"_edit_use_anchors_": false
}

[node name="Tween" type="Tween" parent="CanvasLayer"]

[node name="Viewport" type="Viewport" parent="."]
size = Vector2( 450, 750 )

[node name="Kalm" parent="Viewport" instance=ExtResource( 9 )]
visible = false
[connection signal="mobile_clicked_first_time" from="phoneBooth" to="." method="_on_phoneBooth_mobile_clicked_first_time"]
[connection signal="out_of_time" from="phoneBooth" to="." method="_on_phoneBooth_out_of_time"]
[connection signal="phone_call_begun" from="phoneBooth" to="." method="_on_phoneBooth_phone_call_begun"]
[connection signal="phone_dialed_unknown_number" from="phoneBooth" to="." method="_on_phoneBooth_phone_dialed_unknown_number"]
[connection signal="phone_hung_up" from="phoneBooth" to="." method="_on_phoneBooth_phone_hung_up"]
[connection signal="phone_picked_up" from="phoneBooth" to="." method="_on_phoneBooth_phone_picked_up"]
[connection signal="window_overlay_closed" from="phoneBooth" to="." method="_on_phoneBooth_window_overlay_closed"]
[connection signal="window_overlay_opened" from="phoneBooth" to="." method="_on_phoneBooth_window_overlay_opened"]
[connection signal="line_started" from="CanvasLayer/speechPhone" to="." method="_on_speechPhone_line_started"]
[connection signal="pressed" from="CanvasLayer/speechOptions" to="." method="_on_speechOptions_pressed"]
[connection signal="self_dialogue_finished" from="CanvasLayer/speechSelf" to="." method="_on_speechSelf_self_dialogue_finished"]
[connection signal="enter_pressed" from="CanvasLayer/menu" to="." method="_on_menu_enter_pressed"]
